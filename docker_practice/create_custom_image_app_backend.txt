# deploy and configure the provided application back end with a provided custome docker image 

--- create the Dockerfile for app ---

1. vim /home/user/Dockerfile

FROM scratch
ADD centos-7-x86_64-docker.tar.xz /

LABEL org.label-schema.schema-version="1.0" \
    org.label-schema.name="CentOS Base Image" \
    org.label-schema.vendor="CentOS" \
    org.label-schema.license="GPLv2" \
    org.label-schema.build-date="20191001"

RUN yum -y update
RUN yum install -y python36 python36-devel
RUN pip3 install flask flask_cors
RUN yum install -y mariadb-devel gcc
RUN pip3 install flask_mysqldb
RUN pip3 install mysql-connector
RUN mkdir /app

COPY app.py /app
WORKDIR /app

ENTRYPOINT ["python3"]
CMD ["app.py"]
EXPOSE 65535

2. create the app.py script 
   vim /home/user/app.py
import random
import hashlib
import json

app = Flask(__name__)
CORS(app)

@app.route("/")
def initialTest():
        return "TEST"

@app.route("/youtube_video")
def youtube_video():
        base_url = "https://www.youtube.com/embed/"
        video_ids = [   "h8xYLsmGnEQ",
                        "wZ31Tk2OxyE",
                        "6_IGyMM3QKE",
                        "E7WKVMkF98Q",
                        "g8kJnFTz87M",
                        "ADvYULvHs6Y",
                        "hA-onpcn__8",
                        "WBFb5x6g4dA",
                        "1PPGUOBzzKY",
                        "8xjBwTq2Dss",
                        "iI-cAtKgPXs",
                        "piu-TK00j_c",
                        "7te-pqNAl4o",
                        "s9_L_6r1Eh4",
                        "PZs7MImMOy8",
                        "LJi1FXLINgA",
                        "sGOlcIVd4Dw",
                        "h7a4ATtwkGI",
                        "4bSNfzucG8A"   ]
        return '<iframe src="' + base_url + video_ids[random.randint(0,18)] + '"></iframe>'

@app.route("/random_number")
def random_number():
        return hashlib.sha224(str(random.randint(1, 10149583095834095834059349)).encode()).hexdigest()

@app.route("/motd")
def motd():
        mariadb_connection = mariadb.connect(user='chronic', password='Test321', database='MyDB')
        cursor = mariadb_connection.cursor()
        cursor.execute("SELECT msg FROM motd;")

        msg = cursor.fetchall()[random.randint(0,8)][0]
        mariadb_connection.commit()

        cursor.close()

        return str(msg)

@app.route("/set_motd")
def set_motd():
        msg1 = "Whoever said that the definition of insanity is doing the same thing over and over again and expecting different results has obviously never had to reboot a computer."
        msg2 = "Programmer\â€™s girlfriend: Are you going to sit and type in front of that thing all day or are you going out with me?\nProgrammer: Yes."
        msg3 = "What do you call 8 hobbits?\nA hobbyte"
        msg4 = "How many programmers does it take to change a light bulb?\nNone. It\'s a hardware problem."
        msg5 = "I broke my finger last week. On the other hand I\'m ok."
        msg6 = "What did the computer do at lunchtime?\nHad a byte"
        msg7 = "Once a programmer drowned in the sea. Many Marines where at that time on the beach, but the programmer was shouting F1 F1 and nobody understood it."
        msg8 = "Unix is user friendly. It\'s just very particular about who it\'s friends are.\""
        msg9 = "How many software testers does it take to change a light bulb?\nNone. We just recognized darkness, fixing it is someone else\'s problem."

        messages = [msg1, msg2, msg3, msg4, msg5, msg6, msg7, msg8, msg9,]

        mariadb_connection = mariadb.connect(user='chronic', password='Test321', database='MyDB')
        cursor = mariadb_connection.cursor()

        counter = 0
        for m in messages:
                cursor.execute("INSERT INTO motd(msg) VALUES(%s);", (messages[counter],))
                counter += 1

        mariadb_connection.commit()
        cursor.close()

        return "DONE"


if __name__ == '__main__':
    app.run(debug=True,host='0.0.0.0',port=65535)


3. Build the image
   sudo docker build -t sudo docker build -t cloud_user/flask-app:v1 .


4. verify the prescence of the image 
   sudo docker images 

5. run the container
   sudo docker run -d --restart=always --network=host -p 65535:65535 cloud_user/flask-app:v1

6. verify the container is up and running
   sudo docker ps



--- Create an Image for Our database and run the container --- 

1. create the database file.
   vim myDB.sh

docker container run \
        --name sql-maria \
        -e MYSQL_ROOT_PASSWORD=!!!Test321!! \
        -e MYSQL_USER=chronic \
        -e MYSQL_PASSWORD=Test321 \
        -e MYSQL_DATABASE=MyDB \
        -p 3306:3306 \
        -d mariadb:10

2. change the permissions to the file so it can be executed
   chmod 700 myDB.sh 

3. run the script 
   sudo ./myDB.sh 

4. verify that the sql-maria db container is running 
   sudo docker ps 

5. create an image from the sql-maria container. make sure to replace container_id with the actual container id from the previous step

sudo docker commit -a chronic -m my_sql_img CONTAINER_ID chronic/my_sql_img:v1

6. sudo docker stop CONTAINER_ID 

7. create a database directory
   mkdir database 

8. list the images to get the image ID for the my_sql_img
   sudo docker images 

9. start a new container from the image, make sure to use image id from the previous step
   sudo docker run -p 3306:3306 -v /home/cloud_user/database:/var/lib/mysql/:Z IMAGE_ID


10. ssh cloud_user@PUBLIC_IP_ADDRESS

11. list the containers
    sudo docker ps 

12. stop the recently spun container
    sudo docker stop CONTAINER_ID

13. rerun the original container
    sudo docker run -d --restart=always -p 3306:3306 -v /home/cloud_user/database:/var/lib/mysql/:Z IMAGE_ID


14. verify that both containers are up and running 
    sudo docker ps 


--- Install and configure apache web server reverse proxy to point to back-end ---

1. install apache/httpd 
   sudo yum install httpd -y 

2. start httpd 
   sudo systemctl start httpd 

3. enable httpd
   sudo systemctl enable httpd 

4. confirm its running 
   sudo systemctl status httpd

5. create necessary directories
   sudo mkdir /etc/httpd/sites-enabled
   sudo mkdir /etc/httpd/sites-available 

6. edit the configuration file 
   sudo vim /etc/httpd/conf/httpd.conf

7. find the IncludeOptional sites-enabled/*.conf then add following lines:
   IncludeOptional sites-enabled/*.conf

8. get the public host-name 
   curl -s http://169.254.169.254/latest/meta-data/public-hostname


9. create a configuration file for the hostname 
   sudo vim /etc/httpd/sites-available/PUBLIC_HOSTNAME.conf

10. add the following to the file

<VirtualHost *:80>
    ServerName www.PUBLIC_HOSTNAME
    ServerAlias PUBLIC_HOSTNAME

    DocumentRoot /var/www/html

    ProxyPass          /    http://127.0.0.1:65535/
    ProxyPassReverse   /    http://127.0.0.1:65535/

    <Proxy http://127.0.0.1:65535/>
            Require all granted
            Options None
    </Proxy>
</VirtualHost>




11. link the new configuration file
    sudo ln -s /etc/httpd/sites-available/PUBLIC_HOSTNAME.conf /etc/httpd/sites-enabled/PUBLIC_HOSTNAME.conf



12. restart apache
    sudo systemctl restart httpd 



--- configure firewall ----


1. update the firewall
   sudo firewall-cmd --add-service=http --permanent

2. reload the firewall
   sudo firewall-cmd --reload

3. display the firewall rules
   sudo firewall-cmd --list-all

--- run tests and verify it all works ---


Open a browser.

Paste PUBLIC_HOSTNAME into the address bar and navigate to that location. If it says the service is unavailable, click refresh. Eventually it should display TEST.

Navigate to PUBLIC_HOSTNAME/random_number and verify the results. Reloading the page should provide a random number.

Navigate to PUBLIC_HOSTNAME/youtube_video and verify the results. Reloading the page should display different videos.

Navigate to PUBLIC_HOSTNAME/set_motd. This might display an error that the table does not exist.

Back in the terminal, install mariadb.


1. install mariadb
   yum install mariadb -y

2. log into SQL
   mysql -h 127.0.0.1 -p -u chronic 

3. show the databases
   show database 

4. set the database
   use mydb


5. create the table
   create table motd(msg VARCHAR(200));


6. exit
   exit 

7. log back into SQL
   mysql -h 127.0.0.1 -p -u chronic MyDB

8. show the tables
   show tables

Back in the browser, refresh the page. This should no longer produce an error.

Navigate to PUBLIC_HOSTNAME/motd and see the message of the day












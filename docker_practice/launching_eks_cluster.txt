launching and EKS cluster with AWS 

Create an IAM User with Admin Permissions
Navigate to IAM > Users.
Click Add user.
Set the following values:
User name: k8-admin
Access type: Programmatic access
Click Next: Permissions.
Select Attach existing policies directly.
Select AdministratorAccess.
Click Next: Tags > Next: Review.
Click Create user.
Copy the access key ID and secret access key, and paste them into a text file, as we'll need them in the next step

access_key_id=AKIAVKN35HZU6YUNXHL6
secret_access_key=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


--- launch an ec2 instance and configure the command line tools ---

Navigate to EC2 > Instances.
Click Launch Instance.
On the AMI page, select the Amazon Linux 2 AMI.
Leave t2.micro selected, and click Next: Configure Instance Details.
On the Configure Instance Details page:
Network: Leave default
Subnet: Leave default
Auto-assign Public IP: Enable
Click Next: Add Storage > Next: Add Tags > Next: Configure Security Group.
Click Review and Launch, and then Launch.
In the key pair dialog, select Create a new key pair.
Give it a Key pair name of "mynvkp".
Click Download Key Pair, and then Launch Instances.
Click View Instances, and give it a few minutes to enter the running state.
Once the instance is fully created, check the checkbox next to it and click Connect at the top of the window.
In the Connect to your instance dialog, select EC2 Instance Connect (browser-based SSH connection).
Click Connect.


--- update the aws cli ---

1. aws --version 
2. curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
3. unzip awscliv2.zip
4. which aws - it should be /usr/bin/aws 
5. sudo ./aws/install --bin-dir /usr/bin --install-dir /usr/bin/aws-cli --update
6. check the aws cli 
   sudo ./aws/install --bin-dir /usr/bin --install-dir /usr/bin/aws-cli --update
7. aws configure
   input AWS_ACCESS_KEY=	
   input AWS_SECRET_KEY=
   default region name
   default output format - json


--- downloading kubectl --- 

1. curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.16.8/2020-04-16/bin/linux/amd64/kubectl
2. apply execute permissions to the binary 
   chmod +x ./kubectl
3. copy the binary to a directory in your path
   mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin

4. ensure kubectl is installed 
   kubectl version --short --client

5. Download eksctl
   curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp

6. move the extracted binary to /usr/bin

7. get the version of eksctl
   eksctl version 



--- Provision EKS CLUSTER ---

1. provide an EKS cluster with three worker nodes in us-east-1:
   eksctl create cluster --name dev --version 1.16 --region us-east-1 --nodegroup-name standard-workers --node-type t3.micro --nodes 3 --nodes-min 1 --nodes-max 4 --managed

2. check the cluster 
   eksctl get cluster

3. enable it to connect to our cluster 
   aws eks update-kubeconfig --name dev --region us-east-1


--- Create a Deployment on Your EKS cluster ---

1. install git
   sudo yum install -y git

2. Dowload files from the repo 
   git clone https://github.com/ACloudGuru-Resources/Course_EKS-Basics

3. change directory
   cd Course_EKS-Basics

4. create the service 
   kubectl apply -f ./nginx-svc.yaml

5. check its status 
   kubectl get service 

6. copy the external ip of the loadbalancer and paste it into a txt file to be used at a later stage

7. create the deployment
   kubectl apply -f ./nginx-deployment.yaml

8. check the status of the deployment 
   kubectl get deployment 

9. view the pods 
   kubectl get pods 

10. view the replia sets 
    kubectl get rs 

11. view the nodes
    kubectl get nodes 

12. access the application loadbalancer, replacing it with the loadbalancer external ip from earlier 
   curl "<LOAD_BALANCER_EXTERNAL_IP>"


13. the output should be the nginx homepage index.html


--- delete the EKS cluster --- 

1. eksctl delete cluster dev




